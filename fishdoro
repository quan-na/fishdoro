#!/usr/bin/env fish

set fr_num_todos 10
set fr_root '.'
set fr_ch_est '[  ]'
set fr_ch_pomo '( <)'
set fr_ch_good '[^^]'
set fr_ch_bad '[**]'
set fr_pomo_len 3 # 25
set fr_brk_shrt 1 # 5
set fr_brk_long 2 # 15

function fr_usage
    echo "Sample usages:"
    echo " fishdoro list"
    echo " : List activity inventory"
    echo " fishdoro add A sample activity description"
    echo " : Add an activity named 'A sample activity description' with estimation of 1 pomodoro"
    echo " fishdoro add A sample activity description 5"
    echo " : Add an activity named 'A sample activity description' with estimation of 5 pomodoros"
    echo " fishdoro tour"
    echo " : Start activity tournament"
    echo " fishdoro pomo 5"
    echo " : Start pomodoro on 5th activity"
    echo " fishdoro break"
    echo " : Start a short break"
    echo " fishdoro break long"
    echo " : Start a long break"
    echo " fishdoro break force"
    echo " : Start a short break and trash current pomodoro"
    echo " fishdoro finish"
    echo " : Finish last activity"
end

function fr_ai_list
    set cnt (wc -l < $fr_root/inventory.txt)
    for line in (cat $fr_root/inventory.txt)
        if [ ! $fr_num_todos -lt $cnt ]
            echo "[$cnt] $line"
        else
            echo "\($cnt\) $line"
        end
        set cnt (math "$cnt - 1")
    end
end

function fr_ai_add # original $argv
    if [ 2 -gt (count $argv) ]
        fr_usage
    else
        test "$argv[-1]" -gt 0 >/dev/null 2>&1
        switch $status
            case 0;
                if [ 3 -gt (count $argv) ]
                    fr_usage
                    exit 1
                end
                set act_str $argv[2..-2] (printf "%0.*d" $argv[-1] 0 | string replace -a 0 $fr_ch_est)
            case '*';
                set act_str $argv[2..-1] $fr_ch_est
        end
        flock $fr_root/inventory.txt -c "echo \"$act_str\" >> $fr_root/inventory.txt"
        echo Activity added : $act_str
    end
end

function fr_ai_tour
    begin
        flock -e 200
        set array (cat $fr_root/inventory.txt)
        set arrLen (count $array)

        for sorted in (seq 1 $fr_num_todos)
            for idx in (seq 1 (math "$arrLen - $sorted"))
                set idx1 (math "$idx + 1")
                echo ""
                echo "[J]ack :: $array[$idx]"
                echo "         -----VS-----"
                echo "[K]ing :: $array[$idx1]"
                echo -n "Which is chosen?(j/k/e)"
                read -P ' ' -n1 ans
                while [ $ans != 'j' -a $ans != k -a $ans != 'J' -a $ans != 'K' -a $ans != 'e' -a $ans != 'E' ]
                    read -P ' ' -n1 ans
                end
                if [ $ans = 'e' -o $ans = 'E' ]
                    exit 0
                end
                if [ $ans = 'j' -o $ans = 'J' ]
                    if [ $idx -eq 1 ]
                        if [ $idx1 -eq $arrLen ]
                            set array $array[$idx1] $array[$idx]
                        else
                            set idx2 (math "$idx1 + 1")
                            set array $array[$idx1] $array[$idx] $array[$idx2..$arrLen]
                        end
                    else if [ $idx1 -eq $arrLen ]
                        set idx0 (math "$idx - 1")
                        set array $array[1..$idx0] $array[$idx1] $array[$idx]
                    else
                        set idx2 (math "$idx1 + 1")
                        set idx0 (math "$idx - 1")
                        set array $array[1..$idx0] $array[$idx1] $array[$idx] $array[$idx2..$arrLen]
                    end
                end
            end
        end

        truncate -s 0 $fr_root/inventory.txt
        echo ''
        echo Result:
        for idx in (seq 1 $arrLen)
            echo $array[$idx] >> $fr_root/inventory.txt
            echo "["(math "$arrLen - $idx + 1")"]" $array[$idx]
        end
    end 200<$fr_root/inventory.txt
end

function fr_clean_pomo
    # Clean killed running pomodoro
    begin
        flock -e 200
        set array (cat $fr_root/inventory.txt)
        set arrLen (count $array)

        truncate -s 0 $fr_root/inventory.txt
        for idx in (seq 1 $arrLen)
            set line $array[$idx]
            if string match "* $fr_ch_pomo" "$line" > /dev/null
                set line (string replace " $fr_ch_pomo" '' $line) # remove the pomo char
                echo $line >> $fr_root/inventory.txt
            else
                echo $line >> $fr_root/inventory.txt
            end
        end
    end 200<$fr_root/inventory.txt
    echo Pomo ended
end

set async_secret oDHirw9YvNVkMq3y2
function fr_async
    if [ "$argv[2]" = "$async_secret" ]
        echo now doing
        switch "$argv[3]"
            case "pomodoro";
                # do pomodoro
                for time in (seq 1 $fr_pomo_len)
                    # check for break
                    if cat $fr_root/.breaking | grep $fr_ch_pomo >> /dev/null
                        # already in break
                        echo "Breaked"
                        fr_clean_pomo
                        exit 1
                    end
                    set remain (math "$fr_pomo_len - $time + 1")
                    echo $remain minutes remains
                    if [ $remain -gt 1 ]
                        sleep 60
                    else
                        break
                    end
                end
                for time in (seq 1 60)
                    # check for break
                    if cat $fr_root/.breaking | grep $fr_ch_pomo >> /dev/null
                        # already in break
                        echo "Breaked"
                        fr_clean_pomo
                        exit 1
                    end
                    set remain (math "60 - $time")
                    sleep 1
                    echo $remain seconds remains
                end
                begin
                    flock -e 200
                    set array (cat $fr_root/inventory.txt)
                    set arrLen (count $array)

                    truncate -s 0 $fr_root/inventory.txt
                    for idx in (seq 1 $arrLen)
                        set line $array[$idx]
                        if string match "* $fr_ch_pomo" "$line" > /dev/null
                            set line (string replace " $fr_ch_pomo" '' $line) # remove the pomo char
                            if string match "*$fr_ch_est*" $line[-1] > /dev/null
                                echo (string replace $fr_ch_est $fr_ch_good $line) >> $fr_root/inventory.txt
                            else
                                echo $line$fr_ch_bad >> $fr_root/inventory.txt
                            end
                        else
                            echo $line >> $fr_root/inventory.txt
                        end
                    end
                end 200<$fr_root/inventory.txt
                echo Pomo ended
            case "short-break";
                # do break
                set brk_time $fr_brk_shrt
                for time in (seq 1 $brk_time)
                    set remain (math "$brk_time - $time + 1")
                    echo $remain minutes remains
                    if [ $remain -gt 1 ]
                        sleep 60
                    else
                        break
                    end
                end
                for time in (seq 1 60)
                    set remain (math "60 - $time")
                    sleep 1
                    echo $remain seconds remains
                end
                begin
                    flock -e 200
                    truncate -s 0 $fr_root/.breaking
                end 200<$fr_root/.breaking
                echo 'Break ended.'
            case "long-break";
                # do break
                set brk_time $fr_brk_long
                for time in (seq 1 $brk_time)
                    set remain (math "$brk_time - $time + 1")
                    echo $remain minutes remains
                    if [ $remain -gt 1 ]
                        sleep 60
                    else
                        break
                    end
                end
                for time in (seq 1 60)
                    set remain (math "60 - $time")
                    sleep 1
                    echo $remain seconds remains
                end
                begin
                    flock -e 200
                    truncate -s 0 $fr_root/.breaking
                end 200<$fr_root/.breaking
                echo 'Break ended.'
            case "*";
                fr_usage
        end
    else
        fr_usage
    end
end

function fr_pomo
    if [ 2 -gt (count $argv) ]
        fr_usage
        exit 1
    end
    # check break is running
    if cat $fr_root/.breaking | grep $fr_ch_pomo >> /dev/null
        # already in break
        echo "Already in break, enjoy your time"
        exit 1
    end
    set curr (math "$argv[2]")
    begin
        flock -e 200
        if cat $fr_root/inventory.txt | grep $fr_ch_pomo >> /dev/null
            echo A pomodoro is already running!
            exit 1
        end
        set array (cat $fr_root/inventory.txt)
        set arrLen (count $array)

        truncate -s 0 $fr_root/inventory.txt
        for idx in (seq 1 $arrLen)
            if [ $curr -eq (math "$arrLen - $idx + 1") ]
                echo $array[$idx] $fr_ch_pomo >> $fr_root/inventory.txt
            else
                echo $array[$idx] >> $fr_root/inventory.txt
            end
        end
    end 200<$fr_root/inventory.txt

    set fr_proc (status -f)
    fish -c "$fr_proc async \"$async_secret\" pomodoro" &
end

function fr_break
    if cat $fr_root/.breaking | grep $fr_ch_pomo >> /dev/null
        # already in break
        echo "Already in break"
        exit 1
    else
        # check pomodoro running
        if cat $fr_root/inventory.txt | grep $fr_ch_pomo >> /dev/null
            if [ ! "$argv[1]" = "force" ]
                echo "A pomodoro is already running, use"
                echo " fishdoro break force"
                echo "to stop it"
                exit 1
            end
        end
        # do break
        begin
            flock -e 200
            echo $fr_ch_pomo > $fr_root/.breaking
        end 200<$fr_root/.breaking
        if [ $argv[1] = 'long' ]
            set fr_proc (status -f)
            fish -c "$fr_proc async \"$async_secret\" long-break" &
        else
            set fr_proc (status -f)
            fish -c "$fr_proc async \"$async_secret\" short-break" &
        end
    end
end

function fr_finish
    echo 'finish activity'
end

switch "$argv[1]"
    case 'async'; fr_async $argv
    case 'list'; fr_ai_list
    case 'add'; fr_ai_add $argv
    case 'tour'; fr_ai_tour
    case 'pomo'; fr_pomo $argv
    case 'break'; fr_break "$argv[2]"
    case 'finish'; fr_finish "$argv[2]"
    case 'help'
        fr_usage
    case '*';
        fr_usage
        exit 1
end

exit 0
